[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building quickstart 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-help-plugin:2.1.1:describe (default-cli) @ quickstart ---
[INFO] org.apache.maven.plugins:maven-compiler-plugin:3.0

Name: Maven Compiler Plugin
Description: The Compiler Plugin is used to compile the sources of your
  project.
Group Id: org.apache.maven.plugins
Artifact Id: maven-compiler-plugin
Version: 3.0
Goal Prefix: compiler

This plugin has 3 goals:

compiler:compile
  Description: Compiles application sources
  Implementation: org.apache.maven.plugin.compiler.CompilerMojo
  Language: java
  Bound to phase: compile

  Available parameters:

    annotationProcessors
      Names of annotation processors to run. Only applies to JDK 1.6+ If not
      set, the default annotation processors discovery process applies.

    compilerArgument
      Sets the unformatted single argument string to be passed to the compiler
      if fork is set to true. To pass multiple arguments such as -Xmaxerrs 1000
      (which are actually two arguments) you have to use compilerArguments.
      
      This is because the list of valid arguments passed to a Java compiler
      varies based on the compiler version.

    compilerArguments
      Sets the arguments to be passed to the compiler (prepending a dash) if
      fork is set to true.
      
      This is because the list of valid arguments passed to a Java compiler
      varies based on the compiler version.
      
      To pass -Xmaxerrs 1000 -Xlint -Xlint:-path -Averbose=true you should
      include the following:
      
      <compilerArguments>
        <Xmaxerrs>1000</Xmaxerrs>
        <Xlint/>
        <Xlint:-path/>
        <Averbose>true</Averbose>
      </compilerArguments>

    compilerId (Default: javac)
      Expression: ${maven.compiler.compilerId}
      The compiler id of the compiler to use. See this guide for more
      information.

    compilerReuseStrategy (Default: ${reuseCreated})
      Expression: ${maven.compiler.compilerReuseStrategy}
      Strategy to re use javacc class created:
      - reuseCreated (default): will reuse already created but in case of
        multi-threaded builds, each thread will have its own instance
      - reuseSame: the same Javacc class will be used for each compilation even
        for multi-threaded build
      - alwaysNew: a new Javacc class will be created for each compilation
      Note this parameter value depends on the os/jdk you are using, but the
      default value should work on most of env.

    compilerVersion
      Expression: ${maven.compiler.compilerVersion}
      Version of the compiler to use, ex. '1.3', '1.5', if fork is set to true.

    debug (Default: true)
      Expression: ${maven.compiler.debug}
      Set to true to include debugging information in the compiled class files.

    debuglevel
      Expression: ${maven.compiler.debuglevel}
      Keyword list to be appended to the -g command-line switch. Legal values
      are none or a comma-separated list of the following keywords: lines,
      vars, and source. If debug level is not specified, by default, nothing
      will be appended to -g. If debug is not turned on, this attribute will be
      ignored.

    encoding (Default: ${project.build.sourceEncoding})
      Expression: ${encoding}
      The -encoding argument for the Java compiler.

    excludes
      A list of exclusion filters for the compiler.

    executable
      Expression: ${maven.compiler.executable}
      Sets the executable of the compiler to use when fork is true.

    failOnError (Default: true)
      Expression: ${maven.compiler.failOnError}
      Indicates whether the build will continue even if there are compilation
      errors.

    forceJavacCompilerUse (Default: false)
      Expression: ${maven.compiler.forceJavacCompilerUse}
      compiler can now use javax.tools if available in your current jdk, you
      can disable this feature using
      -Dmaven.compiler.forceJavacCompilerUse=true or in the plugin
      configuration

    fork (Default: false)
      Expression: ${maven.compiler.fork}
      Allows running the compiler in a separate process. If false it uses the
      built in compiler, while if true it will use an executable.

    generatedSourcesDirectory (Default:
    ${project.build.directory}/generated-sources/annotations)
      Specify where to place generated source files created by annotation
      processing. Only applies to JDK 1.6+

    includes
      A list of inclusion filters for the compiler.

    maxmem
      Expression: ${maven.compiler.maxmem}
      Sets the maximum size, in megabytes, of the memory allocation pool, ex.
      '128', '128m' if fork is set to true.

    meminitial
      Expression: ${maven.compiler.meminitial}
      Initial size, in megabytes, of the memory allocation pool, ex. '64',
      '64m' if fork is set to true.

    mojoExecution
      Expression: ${mojoExecution}
      (no description available)

    optimize (Default: false)
      Expression: ${maven.compiler.optimize}
      Set to true to optimize the compiled code using the compiler's
      optimization methods.

    outputFileName
      Sets the name of the output file when compiling a set of sources to a
      single file.
      expression='${project.build.finalName}'

    proc
      Sets whether annotation processing is performed or not. Only applies to
      JDK 1.6+ If not set, both compilation and annotation processing are
      performed at the same time.
      
      Allowed values are:
      
      - none - no annotation processing is performed.
      - only - only annotation processing is done, no compilation.

    showDeprecation (Default: false)
      Expression: ${maven.compiler.showDeprecation}
      Sets whether to show source locations where deprecated APIs are used.

    showWarnings (Default: false)
      Expression: ${maven.compiler.showWarnings}
      Set to true to show compilation warnings.

    skipMultiThreadWarning (Default: false)
      Expression: ${maven.compiler.skipMultiThreadWarning}
      (no description available)

    source (Default: 1.5)
      Expression: ${maven.compiler.source}
      The -source argument for the Java compiler.

    staleMillis (Default: 0)
      Expression: ${lastModGranularityMs}
      Sets the granularity in milliseconds of the last modification date for
      testing whether a source needs recompilation.

    target (Default: 1.5)
      Expression: ${maven.compiler.target}
      The -target argument for the Java compiler.

    verbose (Default: false)
      Expression: ${maven.compiler.verbose}
      Set to true to show messages about what the compiler is doing.

compiler:help
  Description: Display help information on maven-compiler-plugin.
    Call mvn compiler:help -Ddetail=true -Dgoal=<goal-name> to display
    parameter details.
  Implementation: org.apache.maven.plugin.compiler.HelpMojo
  Language: java

  Available parameters:

    detail (Default: false)
      Expression: ${detail}
      If true, display all settable properties for each goal.

    goal
      Expression: ${goal}
      The name of the goal for which to show help. If unspecified, all goals
      will be displayed.

    indentSize (Default: 2)
      Expression: ${indentSize}
      The number of spaces per indentation level, should be positive.

    lineLength (Default: 80)
      Expression: ${lineLength}
      The maximum length of a display line, should be positive.

compiler:testCompile
  Description: Compiles application test sources.
  Implementation: org.apache.maven.plugin.compiler.TestCompilerMojo
  Language: java
  Bound to phase: test-compile

  Available parameters:

    annotationProcessors
      Names of annotation processors to run. Only applies to JDK 1.6+ If not
      set, the default annotation processors discovery process applies.

    compilerArgument
      Sets the unformatted single argument string to be passed to the compiler
      if fork is set to true. To pass multiple arguments such as -Xmaxerrs 1000
      (which are actually two arguments) you have to use compilerArguments.
      
      This is because the list of valid arguments passed to a Java compiler
      varies based on the compiler version.

    compilerArguments
      Sets the arguments to be passed to the compiler (prepending a dash) if
      fork is set to true.
      
      This is because the list of valid arguments passed to a Java compiler
      varies based on the compiler version.
      
      To pass -Xmaxerrs 1000 -Xlint -Xlint:-path -Averbose=true you should
      include the following:
      
      <compilerArguments>
        <Xmaxerrs>1000</Xmaxerrs>
        <Xlint/>
        <Xlint:-path/>
        <Averbose>true</Averbose>
      </compilerArguments>

    compilerId (Default: javac)
      Expression: ${maven.compiler.compilerId}
      The compiler id of the compiler to use. See this guide for more
      information.

    compilerReuseStrategy (Default: ${reuseCreated})
      Expression: ${maven.compiler.compilerReuseStrategy}
      Strategy to re use javacc class created:
      - reuseCreated (default): will reuse already created but in case of
        multi-threaded builds, each thread will have its own instance
      - reuseSame: the same Javacc class will be used for each compilation even
        for multi-threaded build
      - alwaysNew: a new Javacc class will be created for each compilation
      Note this parameter value depends on the os/jdk you are using, but the
      default value should work on most of env.

    compilerVersion
      Expression: ${maven.compiler.compilerVersion}
      Version of the compiler to use, ex. '1.3', '1.5', if fork is set to true.

    debug (Default: true)
      Expression: ${maven.compiler.debug}
      Set to true to include debugging information in the compiled class files.

    debuglevel
      Expression: ${maven.compiler.debuglevel}
      Keyword list to be appended to the -g command-line switch. Legal values
      are none or a comma-separated list of the following keywords: lines,
      vars, and source. If debug level is not specified, by default, nothing
      will be appended to -g. If debug is not turned on, this attribute will be
      ignored.

    encoding (Default: ${project.build.sourceEncoding})
      Expression: ${encoding}
      The -encoding argument for the Java compiler.

    executable
      Expression: ${maven.compiler.executable}
      Sets the executable of the compiler to use when fork is true.

    failOnError (Default: true)
      Expression: ${maven.compiler.failOnError}
      Indicates whether the build will continue even if there are compilation
      errors.

    forceJavacCompilerUse (Default: false)
      Expression: ${maven.compiler.forceJavacCompilerUse}
      compiler can now use javax.tools if available in your current jdk, you
      can disable this feature using
      -Dmaven.compiler.forceJavacCompilerUse=true or in the plugin
      configuration

    fork (Default: false)
      Expression: ${maven.compiler.fork}
      Allows running the compiler in a separate process. If false it uses the
      built in compiler, while if true it will use an executable.

    generatedTestSourcesDirectory (Default:
    ${project.build.directory}/generated-test-sources/test-annotations)
      Specify where to place generated source files created by annotation
      processing. Only applies to JDK 1.6+

    maxmem
      Expression: ${maven.compiler.maxmem}
      Sets the maximum size, in megabytes, of the memory allocation pool, ex.
      '128', '128m' if fork is set to true.

    meminitial
      Expression: ${maven.compiler.meminitial}
      Initial size, in megabytes, of the memory allocation pool, ex. '64',
      '64m' if fork is set to true.

    mojoExecution
      Expression: ${mojoExecution}
      (no description available)

    optimize (Default: false)
      Expression: ${maven.compiler.optimize}
      Set to true to optimize the compiled code using the compiler's
      optimization methods.

    outputFileName
      Sets the name of the output file when compiling a set of sources to a
      single file.
      expression='${project.build.finalName}'

    proc
      Sets whether annotation processing is performed or not. Only applies to
      JDK 1.6+ If not set, both compilation and annotation processing are
      performed at the same time.
      
      Allowed values are:
      
      - none - no annotation processing is performed.
      - only - only annotation processing is done, no compilation.

    showDeprecation (Default: false)
      Expression: ${maven.compiler.showDeprecation}
      Sets whether to show source locations where deprecated APIs are used.

    showWarnings (Default: false)
      Expression: ${maven.compiler.showWarnings}
      Set to true to show compilation warnings.

    skip
      Expression: ${maven.test.skip}
      Set this to 'true' to bypass compilation of test sources. Its use is NOT
      RECOMMENDED, but quite convenient on occasion.

    skipMultiThreadWarning (Default: false)
      Expression: ${maven.compiler.skipMultiThreadWarning}
      (no description available)

    source (Default: 1.5)
      Expression: ${maven.compiler.source}
      The -source argument for the Java compiler.

    staleMillis (Default: 0)
      Expression: ${lastModGranularityMs}
      Sets the granularity in milliseconds of the last modification date for
      testing whether a source needs recompilation.

    target (Default: 1.5)
      Expression: ${maven.compiler.target}
      The -target argument for the Java compiler.

    testCompilerArgument
      Sets the unformatted argument string to be passed to test compiler if
      fork is set to true.
      
      This is because the list of valid arguments passed to a Java compiler
      varies based on the compiler version.

    testCompilerArguments
      Sets the arguments to be passed to test compiler (prepending a dash) if
      fork is set to true.
      
      This is because the list of valid arguments passed to a Java compiler
      varies based on the compiler version.

    testExcludes
      A list of exclusion filters for the compiler.

    testIncludes
      A list of inclusion filters for the compiler.

    testSource
      Expression: ${maven.compiler.testSource}
      The -source argument for the test Java compiler.

    testTarget
      Expression: ${maven.compiler.testTarget}
      The -target argument for the test Java compiler.

    verbose (Default: false)
      Expression: ${maven.compiler.verbose}
      Set to true to show messages about what the compiler is doing.


[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4.578s
[INFO] Finished at: Sun Feb 17 07:54:53 GMT 2013
[INFO] Final Memory: 4M/8M
[INFO] ------------------------------------------------------------------------
